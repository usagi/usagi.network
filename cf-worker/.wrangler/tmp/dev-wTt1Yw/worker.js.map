{
  "version": 3,
  "sources": ["../../../src/worker.js", "../../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../bundle-DtTft2/middleware-insertion-facade.js", "../../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-DtTft2/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\the\\tmp\\usagi.network\\cf-worker\\.wrangler\\tmp\\dev-wTt1Yw",
  "sourcesContent": ["export default {\r\n  async fetch(request, env) {\r\n    const url = new URL(request.url);\r\n    // Normalize path and strip leading / and optional api/ prefix\r\n    let path = url.pathname.replace(/^\\/+/, '');\r\n    if (path.toLowerCase().startsWith('api/')) path = path.slice(4);\r\n\r\n    // Handle CORS preflight\r\n    if (request.method === 'OPTIONS') {\r\n      return new Response(null, { status: 204, headers: corsHeaders() });\r\n    }\r\n\r\n    try {\r\n      if (path === 'diag') {\r\n        const present = {\r\n          TWITCH_CLIENT_ID: !!env.TWITCH_CLIENT_ID,\r\n          TWITCH_CLIENT_SECRET: !!env.TWITCH_CLIENT_SECRET,\r\n          TWITCH_CHANNEL_LOGIN: !!env.TWITCH_CHANNEL_LOGIN,\r\n          YOUTUBE_API_KEY: !!env.YOUTUBE_API_KEY,\r\n          YOUTUBE_CHANNEL_ID: !!env.YOUTUBE_CHANNEL_ID,\r\n        };\r\n        return json(present, 0);\r\n      }\r\n      if (path === 'twitch/clips') {\r\n        const data = await fetchTwitchClips(env);\r\n        return json(data, 300);\r\n      }\r\n      if (path === 'twitch/vods') {\r\n        const data = await fetchTwitchVods(env);\r\n        return json(data, 300);\r\n      }\r\n      if (path === 'youtube/archives') {\r\n        const data = await fetchYouTube(env);\r\n        return json(data, 600);\r\n      }\r\n      return withCors(new Response('Not found', { status: 404 }));\r\n    } catch (e) {\r\n      return withCors(new Response('Proxy error', { status: 502 }));\r\n    }\r\n  },\r\n};\r\n\r\nfunction corsHeaders(){\r\n  return {\r\n    'access-control-allow-origin': '*',\r\n    'access-control-allow-methods': 'GET, OPTIONS',\r\n    'access-control-allow-headers': 'Content-Type',\r\n    'access-control-max-age': '86400',\r\n    'vary': 'Origin',\r\n  };\r\n}\r\n\r\nfunction withCors(res){\r\n  const headers = new Headers(res.headers);\r\n  const cors = corsHeaders();\r\n  Object.entries(cors).forEach(([k, v]) => headers.set(k, v));\r\n  return new Response(res.body, { status: res.status, statusText: res.statusText, headers });\r\n}\r\n\r\nfunction json(obj, maxAge = 60){\r\n  const headers = {\r\n    'content-type': 'application/json; charset=utf-8',\r\n    'cache-control': `public, max-age=${maxAge}`,\r\n    ...corsHeaders(),\r\n  };\r\n  return new Response(JSON.stringify(obj), { headers });\r\n}\r\n\r\nasync function fetchJson(url, opts){\r\n  const res = await fetch(url, opts);\r\n  if (!res.ok) {\r\n    const t = await res.text().catch(() => '');\r\n    throw new Error(`bad upstream ${res.status}: ${t.slice(0,200)}`);\r\n  }\r\n  return res.json();\r\n}\r\n\r\nasync function getTwitchAppToken(env){\r\n  const params = new URLSearchParams({\r\n    client_id: env.TWITCH_CLIENT_ID,\r\n    client_secret: env.TWITCH_CLIENT_SECRET,\r\n    grant_type: 'client_credentials',\r\n  });\r\n  const res = await fetchJson('https://id.twitch.tv/oauth2/token', {\r\n    method: 'POST',\r\n    body: params,\r\n    headers: { 'content-type': 'application/x-www-form-urlencoded' },\r\n  });\r\n  return res.access_token;\r\n}\r\n\r\nasync function getTwitchUser(login, token, env){\r\n  const url = `https://api.twitch.tv/helix/users?login=${encodeURIComponent(login)}`;\r\n  const res = await fetchJson(url, { headers: {\r\n    'Client-ID': env.TWITCH_CLIENT_ID,\r\n    'Authorization': `Bearer ${token}`,\r\n  }});\r\n  return res.data && res.data[0];\r\n}\r\n\r\nasync function fetchTwitchClips(env){\r\n  if (!env.TWITCH_CLIENT_ID || !env.TWITCH_CLIENT_SECRET || !env.TWITCH_CHANNEL_LOGIN) {\r\n    console.warn('TWITCH secrets missing');\r\n    return [];\r\n  }\r\n  const token = await getTwitchAppToken(env);\r\n  const user = await getTwitchUser(env.TWITCH_CHANNEL_LOGIN, token, env);\r\n  if (!user) return [];\r\n  const url = `https://api.twitch.tv/helix/clips?broadcaster_id=${user.id}&first=12`;\r\n  const res = await fetchJson(url, { headers: { 'Client-ID': env.TWITCH_CLIENT_ID, 'Authorization': `Bearer ${token}` } });\r\n  return (res.data || []).map(c => ({ provider:'twitch', kind:'clip', id:c.id, title:c.title, date:c.created_at, thumbnail_url:c.thumbnail_url }));\r\n}\r\n\r\nasync function fetchTwitchVods(env){\r\n  if (!env.TWITCH_CLIENT_ID || !env.TWITCH_CLIENT_SECRET || !env.TWITCH_CHANNEL_LOGIN) {\r\n    console.warn('TWITCH secrets missing');\r\n    return [];\r\n  }\r\n  const token = await getTwitchAppToken(env);\r\n  const user = await getTwitchUser(env.TWITCH_CHANNEL_LOGIN, token, env);\r\n  if (!user) return [];\r\n  const url = `https://api.twitch.tv/helix/videos?user_id=${user.id}&first=12&type=archive`;\r\n  const res = await fetchJson(url, { headers: { 'Client-ID': env.TWITCH_CLIENT_ID, 'Authorization': `Bearer ${token}` } });\r\n  const items = (res.data || []).map(v => ({ provider:'twitch', kind:'vod', id:v.id, title:v.title, date:v.published_at, thumbnail_url: v.thumbnail_url }));\r\n  // Replace Twitch template tokens with concrete size for thumbnails\r\n  items.forEach(it => {\r\n    if (it.thumbnail_url){\r\n      it.thumbnail_url = it.thumbnail_url.replace('%{width}x%{height}', '640x360').replace('{width}x{height}', '640x360');\r\n    }\r\n  });\r\n  return items;\r\n}\r\n\r\nasync function fetchYouTube(env){\r\n  if (!env.YOUTUBE_API_KEY || !env.YOUTUBE_CHANNEL_ID) {\r\n    console.warn('YOUTUBE secrets missing');\r\n    return [];\r\n  }\r\n  const url = `https://www.googleapis.com/youtube/v3/search?key=${env.YOUTUBE_API_KEY}&channelId=${env.YOUTUBE_CHANNEL_ID}&maxResults=12&order=date&part=snippet&type=video`;\r\n  const res = await fetchJson(url);\r\n  return (res.items || []).map(it => ({ provider:'youtube', kind:'archive', id:it.id.videoId, title:it.snippet.title, date:it.snippet.publishedAt, thumbnail_url: it.snippet.thumbnails?.high?.url || it.snippet.thumbnails?.medium?.url || it.snippet.thumbnails?.default?.url }));\r\n}\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\the\\\\tmp\\\\usagi.network\\\\cf-worker\\\\src\\\\worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\the\\\\tmp\\\\usagi.network\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\the\\\\tmp\\\\usagi.network\\\\cf-worker\\\\src\\\\worker.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\the\\\\tmp\\\\usagi.network\\\\cf-worker\\\\.wrangler\\\\tmp\\\\bundle-DtTft2\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\the\\\\tmp\\\\usagi.network\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\the\\\\tmp\\\\usagi.network\\\\cf-worker\\\\.wrangler\\\\tmp\\\\bundle-DtTft2\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\the\\\\tmp\\\\usagi.network\\\\cf-worker\\\\.wrangler\\\\tmp\\\\bundle-DtTft2\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
